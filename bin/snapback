#!/usr/bin/perl -w
use 5.010;
use strict;
use warnings;
use local::lib '/home/pjf/perl5';
use autodie qw(:all);
use POSIX qw(strftime);
use Fcntl qw(:flock);
use Try::Tiny;
use Proc::Daemon;
use Getopt::Std;
use Sys::Hostname qw(hostname);

# Snapback automatic backup script
# Paul '@pjf' Fenwick, Jan 2014

use constant DEBUG => 0;

my $MOUNT_DIR    = "/mnt/qapla-backup";
my $DATE         = strftime("%Y-%m-%d",gmtime);
my $HOST         = hostname();
my $BACKUP_DIR   = "$MOUNT_DIR/$HOST";
my $SNAPSHOT_DIR = "$MOUNT_DIR/snapshots";
my $SNAPSHOT     = "$SNAPSHOT_DIR/SNAPSHOT-$HOST-$DATE";
my $NOTIFY       = "/home/pjf/bin/notify";
my $WAIT_TIME    = 60;    # In seconds
my @FILESYSTEMS  = qw(/ /home);
my @RSYNC_OPTS   = qw(-HAaxX --delete --exclude=/etc/snapback-ignore);

# We don't put this in /tmp because then someone could
# symlink it elsewhere.
my $LOGFILE    = "/root/rsync.log";

# udev doesn't give us much in the way of paths. Let's fix that.
$ENV{PATH} = "$ENV{PATH}:/bin:/usr/bin:/sbin:/usr/sbin";

my %opts = (
    t => 0,         # Remain attached to terminal, disables wait
    s => '',        # Snapshot name
    v => 0,         # Verbose mode. Implies -t.
);

getopts('vts:', \%opts);

# Verbose mode requires a terminal.
if ($opts{v}) {
    $opts{t} = 1;
    push @RSYNC_OPTS, '-v';
}

if (not $opts{t}) {
    # Immediately become a daemon so udev doesn't get grumpy with us
    Proc::Daemon::Init();
}

if ($opts{s}) {
    $SNAPSHOT = "$SNAPSHOT_DIR/SNAPSHOT-$HOST-$opts{s}";
}

try {
    # Don't run twice! That would be bad.

    flock(DATA, LOCK_EX | LOCK_NB)
        or die "Backup already running - exiting\n";

    # Okay, now try our backup. :)
    make_backup();
}
catch {
    notify(1, "Backup failed! $_");
    exit 1;
};

exit 0;

sub make_backup {

    # Make sure our directory is mounted. Note we're
    # using autodie's magic system here which returns
    # the cmd's exit status.

    my $needs_mounting = system( [-1], "mountpoint -q $MOUNT_DIR");

    if ($needs_mounting) {
        notify(-1, "Mounting $MOUNT_DIR");
        system("mount $MOUNT_DIR");
    }

    if (-e $SNAPSHOT) {

        # We already have a backup today. Presume they're adding
        # the drive for some other purpose.

        notify("Backup already taken today, skipping.");
        exit 0;
    }

    if (not $opts{t}) {
        # Take our backup... We sleep first, to give our user some
        # time to kill the process if they want.

        notify("Starting backup in $WAIT_TIME seconds");

        sleep($WAIT_TIME);
    }

    notify("Backup starting...");
    system("ionice -c3 nice rsync @RSYNC_OPTS @FILESYSTEMS $BACKUP_DIR > $LOGFILE 2>&1");

    # Snapshot...
    notify(-1, "Snapshotting backup with date: $DATE (UTC)");
    system("btrfs subvolume snapshot -r $BACKUP_DIR $SNAPSHOT");

    if ($needs_mounting) {

        # If we needed to mount, we should unmount at the end.
        notify(-1,"Unmounting drive");
        system("umount $MOUNT_DIR");
    }

    # Done!
    notify("Backup complete");
}

sub notify {
    # However you want to get notified goes here. You could use
    # 'say', but I have a script that sends messages to my pebble
    # watch.

    # If running with -t, write to the terminal
    if ($opts{t}) {
        say "@_";
    }
    else {
        # Otherwise, send it to my watch. :)
        system($NOTIFY, @_);
    }
}

__DATA__

This magic line is needed for locking magic.
